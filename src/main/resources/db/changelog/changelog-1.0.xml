<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">

    <changeSet author="rufin.hounkpe" id="create-table-course">
        <sql>
            CREATE TABLE course (
            id BIGINT NOT NULL AUTO_INCREMENT,
            title VARCHAR(255) NOT NULL,
            author VARCHAR(255),
            serial_number VARCHAR(255),
            category VARCHAR(255),
            publish_date DATE,
            CONSTRAINT PK_id PRIMARY KEY (id)
            );
        </sql>
        <rollback>
            DROP TABLE course;
        </rollback>
    </changeSet>

    <changeSet id="create-table-transaction" author="rufin.hounkpe">
        <sql>
            CREATE TABLE transaction (
            id BIGINT NOT NULL AUTO_INCREMENT,
            course_id BIGINT NOT NULL,
            user_id BIGINT NOT NULL,
            date_of_issue DATETIME NOT NULL,
            CONSTRAINT PK_id PRIMARY KEY (id),
            CONSTRAINT fk_tran_course FOREIGN KEY (course_id) REFERENCES course(id) ON DELETE CASCADE ON UPDATE
            CASCADE
            );
        </sql>
        <rollback>
            DROP TABLE transaction;
        </rollback>
    </changeSet>

    <changeSet author="rufin.hounkpe" id="insert-course-batch" runOnChange="true">
        <preConditions onFail="CONTINUE">
            <dbms type="Postgres"/>
        </preConditions>
        <!-- liquibase does not drop stored procedures automatically -->
        <sql>
            drop procedure if exists doWhileCourse
        </sql>
        <createProcedure>
            create procedure doWhileCourse()
            BEGIN
            DECLARE i INT DEFAULT 1000;
            SET @_insert = "";
            WHILE (i >= 0) DO
            SET @varCourseTitle = CONCAT('Course ',i);
            SET @varAuthor = CONCAT('Author ',i);
            SET @varSerial = CONCAT('SERIAL ',i);
            SET @varCategory = CONCAT('Category ',i);
            SET @varTime = NOW();
            SET @concatenated = CONCAT('(',
            CONCAT_WS(', ',
            CONCAT("'",@varCourseTitle,"'"),
            CONCAT("'",@varAuthor,"'"),
            CONCAT("'",@varSerial,"'"),
            CONCAT("'",@varCategory,"'"),
            CONCAT("'",@varTime,"'")),
            ')');
            IF   @_insert = "" THEN SET @_insert = @concatenated;
            ELSE SET @_insert = CONCAT_WS(', ', @_insert,@concatenated);
            END IF;
            SET i = i-1;
            END WHILE;

            SET @str = CONCAT("INSERT INTO course (title, author, serial_number, category, publish_date)
            VALUES ",@_insert);
            PREPARE stmt1 FROM @str;
            EXECUTE stmt1;
            DEALLOCATE PREPARE stmt1;
            END
        </createProcedure>
        <sql>
            CALL doWhileCourse();
        </sql>
        <rollback>
            DROP procedure doWhileCourse;
        </rollback>
    </changeSet>
</databaseChangeLog>
